cpp_file : translation_unit
primary_expression : IDENTIFIER
primary_expression : CONSTANT
primary_expression : STRING_LITERAL
primary_expression : '(' expression ')'
postfix_expression : primary_expression
postfix_expression : postfix_expression '[' expression ']'
postfix_expression : postfix_expression '(' ')'
postfix_expression : postfix_expression '(' argument_expression_list ')'
postfix_expression : postfix_expression '.' IDENTIFIER
postfix_expression : postfix_expression PTR_OP IDENTIFIER
postfix_expression : postfix_expression INC_OP
postfix_expression : postfix_expression DEC_OP
postfix_expression : '(' type_name ')' '{' initializer_list '}'
postfix_expression : '(' type_name ')' '{' initializer_list ',' '}'
argument_expression_list : assignment_expression
argument_expression_list : argument_expression_list ',' assignment_expression
unary_expression : postfix_expression
unary_expression : INC_OP unary_expression
unary_expression : DEC_OP unary_expression
unary_expression : unary_operator cast_expression
unary_expression : SIZEOF unary_expression
unary_expression : SIZEOF '(' type_name ')'
unary_operator : '&'
unary_operator : '*'
unary_operator : '+'
unary_operator : '-'
unary_operator : '~'
unary_operator : '!'
cast_expression : unary_expression
cast_expression : '(' type_name ')' cast_expression
multiplicative_expression : cast_expression
multiplicative_expression : multiplicative_expression '*' cast_expression
multiplicative_expression : multiplicative_expression '/' cast_expression
multiplicative_expression : multiplicative_expression '%' cast_expression
additive_expression : multiplicative_expression
additive_expression : additive_expression '+' multiplicative_expression
additive_expression : additive_expression '-' multiplicative_expression
shift_expression : additive_expression
shift_expression : shift_expression LEFT_OP additive_expression
shift_expression : shift_expression RIGHT_OP additive_expression
relational_expression : shift_expression
relational_expression : relational_expression '<' shift_expression
relational_expression : relational_expression '>' shift_expression
relational_expression : relational_expression LE_OP shift_expression
relational_expression : relational_expression GE_OP shift_expression
equality_expression : relational_expression
equality_expression : equality_expression EQ_OP relational_expression
equality_expression : equality_expression NE_OP relational_expression
and_expression : equality_expression
and_expression : and_expression '&' equality_expression
exclusive_or_expression : and_expression
exclusive_or_expression : exclusive_or_expression '^' and_expression
inclusive_or_expression : exclusive_or_expression
inclusive_or_expression : inclusive_or_expression '|' exclusive_or_expression
logical_and_expression : inclusive_or_expression
logical_and_expression : logical_and_expression AND_OP inclusive_or_expression
logical_or_expression : logical_and_expression
logical_or_expression : logical_or_expression OR_OP logical_and_expression
conditional_expression : logical_or_expression
conditional_expression : logical_or_expression '?' expression ':' conditional_expression
assignment_expression : conditional_expression
assignment_expression : unary_expression assignment_operator assignment_expression
assignment_operator : '='
assignment_operator : MUL_ASSIGN
assignment_operator : DIV_ASSIGN
assignment_operator : MOD_ASSIGN
assignment_operator : ADD_ASSIGN
assignment_operator : SUB_ASSIGN
assignment_operator : LEFT_ASSIGN
assignment_operator : RIGHT_ASSIGN
assignment_operator : AND_ASSIGN
assignment_operator : XOR_ASSIGN
assignment_operator : OR_ASSIGN
expression : assignment_expression
expression : expression ',' assignment_expression
constant_expression : conditional_expression
declaration : declaration_specifiers ';'
declaration : declaration_specifiers init_declarator_list ';'
declaration_specifiers : storage_class_specifier
declaration_specifiers : storage_class_specifier declaration_specifiers
declaration_specifiers : type_specifier
declaration_specifiers : type_specifier declaration_specifiers
declaration_specifiers : type_qualifier
declaration_specifiers : type_qualifier declaration_specifiers
declaration_specifiers : function_specifier
declaration_specifiers : function_specifier declaration_specifiers
init_declarator_list : init_declarator
init_declarator_list : init_declarator_list ',' init_declarator
init_declarator : declarator
init_declarator : declarator '=' initializer
storage_class_specifier : TYPEDEF
storage_class_specifier : EXTERN
storage_class_specifier : STATIC
storage_class_specifier : AUTO
storage_class_specifier : REGISTER
type_specifier : VOID
type_specifier : CHAR
type_specifier : SHORT
type_specifier : INT
type_specifier : LONG
type_specifier : FLOAT
type_specifier : DOUBLE
type_specifier : SIGNED
type_specifier : UNSIGNED
type_specifier : BOOL
type_specifier : COMPLEX
type_specifier : IMAGINARY
type_specifier : struct_or_union_specifier
type_specifier : enum_specifier
type_specifier : TYPE_NAME
struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'
struct_or_union_specifier : struct_or_union '{' struct_declaration_list '}'
struct_or_union_specifier : struct_or_union IDENTIFIER
struct_or_union : STRUCT
struct_or_union : UNION
struct_declaration_list : struct_declaration
struct_declaration_list : struct_declaration_list struct_declaration
struct_declaration : specifier_qualifier_list struct_declarator_list ';'
specifier_qualifier_list : type_specifier specifier_qualifier_list
specifier_qualifier_list : type_specifier
specifier_qualifier_list : type_qualifier specifier_qualifier_list
specifier_qualifier_list : type_qualifier
struct_declarator_list : struct_declarator
struct_declarator_list : struct_declarator_list ',' struct_declarator
struct_declarator : declarator
struct_declarator : ':' constant_expression
struct_declarator : declarator ':' constant_expression
enum_specifier : ENUM '{' enumerator_list '}'
enum_specifier : ENUM IDENTIFIER '{' enumerator_list '}'
enum_specifier : ENUM '{' enumerator_list ',' '}'
enum_specifier : ENUM IDENTIFIER '{' enumerator_list ',' '}'
enum_specifier : ENUM IDENTIFIER
enumerator_list : enumerator
enumerator_list : enumerator_list ',' enumerator
enumerator : IDENTIFIER
enumerator : IDENTIFIER '=' constant_expression
type_qualifier : CONST
type_qualifier : RESTRICT
type_qualifier : VOLATILE
function_specifier : INLINE
declarator : pointer direct_declarator
declarator : direct_declarator
direct_declarator : IDENTIFIER
direct_declarator : '(' declarator ')'
direct_declarator : direct_declarator '[' type_qualifier_list assignment_expression ']'
direct_declarator : direct_declarator '[' type_qualifier_list ']'
direct_declarator : direct_declarator '[' assignment_expression ']'
direct_declarator : direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
direct_declarator : direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
direct_declarator : direct_declarator '[' type_qualifier_list '*' ']'
direct_declarator : direct_declarator '[' '*' ']'
direct_declarator : direct_declarator '[' ']'
direct_declarator : direct_declarator '(' parameter_type_list ')'
direct_declarator : direct_declarator '(' identifier_list ')'
direct_declarator : direct_declarator '(' ')'
pointer : '*'
pointer : '*' type_qualifier_list
pointer : '*' pointer
pointer : '*' type_qualifier_list pointer
type_qualifier_list : type_qualifier
type_qualifier_list : type_qualifier_list type_qualifier
parameter_type_list : parameter_list
parameter_type_list : parameter_list ',' ELLIPSIS
parameter_list : parameter_declaration
parameter_list : parameter_list ',' parameter_declaration
parameter_declaration : declaration_specifiers declarator
parameter_declaration : declaration_specifiers abstract_declarator
parameter_declaration : declaration_specifiers
identifier_list : IDENTIFIER
identifier_list : identifier_list ',' IDENTIFIER
type_name : specifier_qualifier_list
type_name : specifier_qualifier_list abstract_declarator
abstract_declarator : pointer
abstract_declarator : direct_abstract_declarator
abstract_declarator : pointer direct_abstract_declarator
direct_abstract_declarator : '(' abstract_declarator ')'
direct_abstract_declarator : '[' ']'
direct_abstract_declarator : '[' assignment_expression ']'
direct_abstract_declarator : direct_abstract_declarator '[' ']'
direct_abstract_declarator : direct_abstract_declarator '[' assignment_expression ']'
direct_abstract_declarator : '[' '*' ']'
direct_abstract_declarator : direct_abstract_declarator '[' '*' ']'
direct_abstract_declarator : '(' ')'
direct_abstract_declarator : '(' parameter_type_list ')'
direct_abstract_declarator : direct_abstract_declarator '(' ')'
direct_abstract_declarator : direct_abstract_declarator '(' parameter_type_list ')'
initializer : assignment_expression
initializer : '{' initializer_list '}'
initializer : '{' initializer_list ',' '}'
initializer_list : initializer
initializer_list : designation initializer
initializer_list : initializer_list ',' initializer
initializer_list : initializer_list ',' designation initializer
designation : designator_list '='
designator_list : designator
designator_list : designator_list designator
designator : '[' constant_expression ']'
designator : '.' IDENTIFIER
statement : labeled_statement
statement : compound_statement
statement : expression_statement
statement : selection_statement
statement : iteration_statement
statement : jump_statement
labeled_statement : IDENTIFIER ':' statement
labeled_statement : CASE constant_expression ':' statement
labeled_statement : DEFAULT ':' statement
compound_statement : '{' '}'
compound_statement : '{' block_item_list '}'
block_item_list : block_item
block_item_list : block_item_list block_item
block_item : declaration
block_item : statement
expression_statement : ';'
expression_statement : expression ';'
selection_statement : IF '(' expression ')' statement
selection_statement : IF '(' expression ')' statement ELSE statement
selection_statement : SWITCH '(' expression ')' statement
iteration_statement : WHILE '(' expression ')' statement
iteration_statement : DO statement WHILE '(' expression ')' ';'
iteration_statement : FOR '(' expression_statement expression_statement ')' statement
iteration_statement : FOR '(' expression_statement expression_statement expression ')' statement
iteration_statement : FOR '(' declaration expression_statement ')' statement
iteration_statement : FOR '(' declaration expression_statement expression ')' statement
jump_statement : GOTO IDENTIFIER ';'
jump_statement : CONTINUE ';'
jump_statement : BREAK ';'
jump_statement : RETURN ';'
jump_statement : RETURN expression ';'
translation_unit : external_declaration
translation_unit : translation_unit external_declaration
external_declaration : function_definition
external_declaration : declaration
function_definition : declaration_specifiers declarator declaration_list compound_statement
function_definition : declaration_specifiers declarator compound_statement
declaration_list : declaration
declaration_list : declaration_list declaration
