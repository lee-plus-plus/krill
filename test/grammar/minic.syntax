program : decl_list
decl_list : decl_list decl
decl_list : decl
decl : var_decl
decl : fun_decl
var_decl : type_spec var_declarator_list ';'
var_declarator_list : var_declarator_list ',' var_declarator
var_declarator_list : var_declarator
var_declarator : IDENT '[' int_literal ']'
var_declarator : IDENT
type_spec : VOID
type_spec : INT
fun_decl : type_spec FUNCTION_IDENT '(' params ')' ';'
fun_decl : type_spec FUNCTION_IDENT '(' params ')' compound_stmt
FUNCTION_IDENT : IDENT
params : param_list
params : VOID
param_list : param_list ',' param
param_list : param
param : type_spec IDENT '[' int_literal ']'
param : type_spec IDENT
stmt_list : stmt_list stmt
stmt_list : stmt
stmt : expr_stmt
stmt : block_stmt
stmt : if_stmt
stmt : while_stmt
stmt : return_stmt
stmt : continue_stmt
stmt : break_stmt
expr_stmt : IDENT '=' expr ';'
expr_stmt : IDENT '[' expr ']' '=' expr ';'
expr_stmt : '$' expr '=' expr ';'
expr_stmt : IDENT '(' args_ ')' ';'
while_stmt : WHILE_IDENT '(' expr ')' stmt
WHILE_IDENT : WHILE
block_stmt : '{' stmt_list '}'
block_stmt : '{' '}'
compound_stmt : '{' local_decls stmt_list '}'
compound_stmt : '{' local_decls '}'
compound_stmt : '{' stmt_list '}'
compound_stmt : '{' '}'
local_decls : local_decls local_decl
local_decls : local_decl
local_decl : type_spec local_declarator_list ';'
local_declarator_list : local_declarator_list ',' local_declarator
local_declarator_list : local_declarator
local_declarator : IDENT '[' int_literal ']'
local_declarator : IDENT
if_stmt : IF '(' expr ')' stmt
if_stmt :  IF '(' expr ')' stmt ELSE stmt
return_stmt : RETURN ';'
return_stmt :  RETURN expr ';'
expr : expr AND expr
expr : expr OR expr
expr : expr '&' expr
expr : expr '|' expr
expr : expr '^' expr
expr : expr EQ expr
expr : expr NE expr
expr : expr LE expr
expr : expr '<' expr
expr : expr GE expr
expr : expr '>' expr
expr : expr LSHIFT expr
expr : expr RSHIFT expr
expr : expr '+' expr
expr : expr '-' expr
expr : expr '*' expr
expr : expr '/' expr
expr : expr '%' expr
expr : '!' expr
expr : '-' expr
expr : '+' expr
expr : '$' expr
expr : '~' expr
expr : int_literal
expr : '(' expr ')'
expr : IDENT '[' expr ']'
expr : IDENT '(' args_ ')'
expr : IDENT '(' ')'
expr : IDENT
int_literal : DECNUM
int_literal : HEXNUM
arg_list : arg_list ',' expr
arg_list : expr
args_ : arg_list
continue_stmt : CONTINUE ';'
break_stmt : BREAK ';'